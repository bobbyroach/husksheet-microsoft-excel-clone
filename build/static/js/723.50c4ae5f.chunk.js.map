{"version":3,"file":"static/js/723.50c4ae5f.chunk.js","mappings":"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","sources":["backend/controller/requests/getUpdatesForSubscription.ts","backend/controller/requests/updatePublished.ts","components/dashboardComponents/DashboardHeader.tsx","components/dashboardComponents/PopupModal.tsx","components/dashboardComponents/CreateSpreadsheetModal.tsx","components/dashboardComponents/PRMenuPopup.tsx","components/dashboardComponents/MySheetsList.tsx","components/dashboardComponents/OtherSheetsList.tsx","pages/Dashboard.tsx"],"sourcesContent":["import { IRequest } from './IRequest'\nimport Model from '../../Model'\nimport * as client from '../client'\nimport axios from 'axios'\nimport { ARequest } from './ARequest'\n\nclass GetUpdatesForSubscription extends ARequest implements IRequest {\n    private readonly publisher: string;\n    private readonly spreadsheet: string;\n    private readonly id: number;\n\n    constructor(publisher: string, spreadsheet: string, id: number, username: string, password: string) {\n        super(username, password);\n        this.publisher = publisher;\n        this.spreadsheet = spreadsheet;\n        this.id = id;\n    }\n\n    async execute(Model: Model): Promise<void> {\n        const encoded = this.encodeLoginString();\n        const response = await client.getUpdatesForSubscription(this.publisher, this.spreadsheet, 0, encoded);\n\n        const updates = response.value.map((argument) => argument.payload);\n\n        Model.addUpdatesForPublished(this.publisher, this.spreadsheet, updates);\n    }\n}\n\nexport default GetUpdatesForSubscription\n","import { IRequest } from './IRequest';\nimport Model from '../../Model';\nimport * as client from '../client';\nimport axios from 'axios';\nimport { ARequest } from './ARequest';\n\nclass UpdatePublished extends ARequest implements IRequest {\n    private publisher: string;\n    private spreadsheet: string;\n    private id: number;\n    private payload: string;\n\n    constructor(publisher: string, spreadsheet: string, id: number, payload: string, username: string, password: string) {\n        super(username, password);\n        this.publisher = publisher;\n        this.spreadsheet = spreadsheet;\n        this.id = id;\n        this.payload = payload;\n    }\n\n    async execute(Model: Model): Promise<void> {\n        const encoded = this.encodeLoginString();\n        const response = await client.updatePublished(this.publisher, this.spreadsheet, this.id, this.payload, encoded);\n\n        Model.addUpdatesForPublished(this.publisher, this.spreadsheet, [this.payload]);\n    }\n}\n\nexport default UpdatePublished\n","import { FC } from 'react'\nimport './dashboardCSS/dashboardComponents.css'\nimport User from '../../backend/User'\n// @author Robert Roach\n\ninterface DashboardHeaderProps {\n    updateCurrentUser: (user: User | null) => void,\n    user: User,\n}\n\nconst DashboardHeader: FC<DashboardHeaderProps> = ({ updateCurrentUser, user }) => {\n\n    return (\n        <div className='dashboard-header'>\n            <div className='dashboard-title'>AARCS Husksheets Dashboard</div>\n            <div className='header-right-side'>\n                <div className='username'>{user.getUserName()}</div>\n                <button \n                    className='logout-button'\n                    onClick={() => updateCurrentUser(null)}\n                >\n                    Logout\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default DashboardHeader","import './dashboardCSS/popups.css'\n// @author Robert Roach\n\ninterface PopupModalProps {\n    content: React.ReactNode,\n    handleTogglePopupModal: () => void,\n}\n\n// Reuseable popup modal\nconst PopupModal: React.FC<PopupModalProps> = ({ content, handleTogglePopupModal }) => {\n\n    return (\n        <div className='modal-backdrop' onClick={() => handleTogglePopupModal()}>\n            <div className='modal-body' onClick={(e) => e.stopPropagation()}>\n                {content}\n            </div>\n        </div>\n    )\n}\n\nexport default PopupModal","import { FC, useState } from \"react\";\nimport PopupModal from \"./PopupModal\";\nimport './dashboardCSS/popups.css'\nimport Spreadsheet from \"../../backend/Spreadsheet\";\n// @author Robert Roach\n\ninterface CreateSpreadsheetModalProps {\n    handleTogglePopupModal: () => void,\n    handleCreateSpreadsheet: (name: string, rows: number, columns: number) => void,\n    spreadsheetList: Spreadsheet[],\n}\n\nconst CreateSpreadsheetModal: FC<CreateSpreadsheetModalProps> = ({ handleTogglePopupModal, handleCreateSpreadsheet, spreadsheetList }) => {\n\n    const [name, setName] = useState('')\n    const [rows, setRows] = useState('')\n    const [columns, setColumns] = useState('')\n    const [error, setError] = useState('')\n\n    // Handles logic for creating a spreadsheet in the popup\n    const handleClickCreate = (name: string, rows: string, columns: string) => {\n        const existingSpreadsheet = spreadsheetList.find(ss => ss.getSheetName() === name)\n\n        // If name field is empty or if spreadsheet name already exists, display error\n        if (name !== '') {\n            if (existingSpreadsheet) {\n                setError(\"Spreadsheet name already exists\")\n            } else {\n                handleTogglePopupModal()\n                handleCreateSpreadsheet(name, Number(rows), Number(columns))\n            }\n        } else {\n            setError('Spreadsheet must have a name')\n        }\n    }\n\n    // Creating a new spreadsheet content to be rendered inside popup modal\n    const spreadsheetPopupContent: React.ReactNode = (\n            <div className=\"create-spreadsheet-popup-content\">\n                <h2>New Spreadsheet</h2>\n                <div className='field-and-input'>\n                    <p>Name:</p>\n                    <input \n                        className=\"name-input\" \n                        onChange={(e) => setName(e.target.value)}\n                        placeholder=\"Name\" />\n                </div>\n                <div className=\"row-input\">\n                    <div className='field-and-input'>\n                        <p>Rows:</p>\n                        <input \n                            className=\"dimension-input\" \n                            onChange={(e) => setRows(e.target.value)}\n                            placeholder=\"Rows\" />\n                    </div>\n                    <div className='field-and-input'>\n                        <p>Columns:</p>\n                        <input \n                            className=\"dimension-input\" \n                            onChange={(e) => setColumns(e.target.value)}\n                            placeholder=\"Columns\" />\n                    </div>\n                    {error !== '' \n                        ? <div className='error'>{error}</div> \n                        : <></>\n                    }\n                </div>\n                <div className='buttons'>\n                    <button onClick={() => handleTogglePopupModal()}>Cancel</button>\n                    <button \n                        onClick={() => { handleClickCreate(name, rows, columns)}}\n                    >\n                        Create new spreadsheet\n                    </button>\n                </div>\n            </div>\n    )\n\n    return (\n        <PopupModal content={spreadsheetPopupContent} handleTogglePopupModal={handleTogglePopupModal}/>\n    )\n}\n\nexport default CreateSpreadsheetModal","import { FC, useEffect, useState } from \"react\"\nimport PopupModal from \"./PopupModal\"\nimport Spreadsheet from \"../../backend/Spreadsheet\"\nimport './dashboardCSS/popups.css'\nimport Controller from \"../../backend/controller/controller\"\nimport GetUpdatesForSubscription from \"../../backend/controller/requests/getUpdatesForSubscription\"\nimport User from \"../../backend/User\"\nimport UpdatePublished from \"../../backend/controller/requests/updatePublished\"\n// @author Robert Roach\n\ninterface PRMenuPopupProps {\n    controller: Controller,\n    handleTogglePRPopup: (index: number) => void,\n    PRIndex: number,\n    spreadSheetList: Spreadsheet[],\n    user: User,\n}\n\nconst PRMenuPopup: FC<PRMenuPopupProps> = ({ controller, handleTogglePRPopup, PRIndex, spreadSheetList, user }) => {\n    const [updateRequests, setUpdateRequests] = useState<string[][]>([])\n    const [error, setError] = useState(\"\")\n\n    // Retrieve the list of subscription updates when this component is rendered\n    useEffect(() => {\n        /**\n         * Calls getSubscriptionUpdates endpoint and then returns the new updates from the\n         * model, or throws an error\n         */\n        const getUpdates = async () => {\n            try {\n                const sheet = spreadSheetList[PRIndex]\n                // Call getSubscriptionUpdates endpoint to retrive updates for the model\n                await controller.excecuteRequest(\n                    new GetUpdatesForSubscription(\n                        user.getUserName(), sheet.getSheetName(), Number(sheet.getID()), user.getUserName(), user.getPassword())\n                )\n                // Get updates from the model\n                const updateList = controller.getModel()\n                    .getSubscriptionUpdates(user.getUserName(), sheet.getSheetName())\n\n                setUpdateRequests(updateList.reverse())\n            } catch (error) {\n                setError(\"Error getting subscription updates\")\n            }\n        }\n        getUpdates()\n    }, [spreadSheetList, PRIndex, controller, user])\n\n    /**\n     * Approve a specific subscription update request and set a published update\n     * @param updateRequestIndex : index of subscription change stored in spreadsheet to approve\n     */\n    const handleApproveSubscription = async (sheet: Spreadsheet, updateRequestIndex: number) => {\n        try {\n            const updates = sheet.getSubscriptionUpdates()[updateRequestIndex].join(\"\\n\")\n            await controller.excecuteRequest(\n                new UpdatePublished(\n                    user.getUserName(), sheet.getSheetName(), Number(sheet.getID()), updates, user.getUserName(), user.getPassword())\n            )\n        } catch (error) {\n            setError(\"Error setting published update\")\n        }\n    }\n\n    // Content to display PR Changes for a spreadsheet in a popup modal\n    const PRMenuContent: React.ReactNode = (\n        <div className='update-requests-body'>\n            <h2>Pull Requests</h2>\n            {error !== \"\" ? <div style={{ color: 'red' }}>{error}</div>\n                : <>\n                    {updateRequests.length === 0 ?\n                        <div>No update requests</div>\n                        :\n                        <div className='update-requests-list'>\n                            {updateRequests.map((updateRequest, requestIndex) => (\n\n                                <div className='update-request' key={requestIndex}>\n                                    <button\n                                        className='approve-button'\n                                        onClick={() => handleApproveSubscription(spreadSheetList[PRIndex], requestIndex)}\n                                    >\n                                        Approve Updates\n                                    </button>\n                                    <div className='updates-list'>\n                                        {updateRequest.map((update, updateIndex) => (\n                                            <div className='update' key={updateIndex}>\n                                                {update}\n                                            </div>\n                                        ))}\n                                    </div>\n                                </div>\n                            ))}\n                        </div>\n                    }\n                </>}\n        </div>\n    )\n\n    return (\n        <PopupModal content={PRMenuContent} handleTogglePopupModal={() => handleTogglePRPopup(PRIndex)} />\n    )\n}\n\nexport default PRMenuPopup\n","import { FC } from \"react\"\nimport Spreadsheet from \"../../backend/Spreadsheet\"\nimport { NavLink } from \"react-router-dom\"\nimport Controller from \"../../backend/controller/controller\"\nimport User from \"../../backend/User\"\nimport PRMenuPopup from \"./PRMenuPopup\"\n// @author Robert Roach\n\ninterface MySheetsListProps {\n    controller: Controller,\n    handleChooseSpreadsheet: (id: string) => void,\n    handleDeleteSpreadsheet: (name: string) => void,\n    handleTogglePRPopup: (index: number) => void,\n    loading: boolean,\n    pRDropdownsOpen: boolean[],\n    spreadSheetList: Spreadsheet[],\n    user: User,\n}\n\nconst MySheetsList: FC<MySheetsListProps> = ({ controller, handleChooseSpreadsheet, handleDeleteSpreadsheet,  handleTogglePRPopup, loading, pRDropdownsOpen,  spreadSheetList, user }) => {\n\n    return (\n        <div>\n            {!loading ? <div className='spreadSheet-list'>\n                <div className='spreadSheet-link spreadSheet-list-header my-sheets-header'>\n                    <p>Name</p>\n                </div>\n                {spreadSheetList.map((sheet, index) =>\n                    <div className='link-container' key={index}>\n                        <NavLink\n                            className='spreadSheet-link my-sheets-header'\n                            onClick={() => handleChooseSpreadsheet(sheet.getSheetName())}\n                            to='/spreadsheet'\n                        >\n                            <p>{sheet.getSheetName()}</p>\n                        </NavLink>\n                        <button\n                            className='pr-button'\n                            onClick={() => { handleTogglePRPopup(index) }}\n                        >\n                            <p>View Update Requests</p>\n                        </button>\n                        <button\n                            className='delete-button'\n                            onClick={() => handleDeleteSpreadsheet(sheet.getSheetName())}\n                        >\n                            Delete\n                        </button>\n\n                        {/* Conditionally render PR popup menu for each spreadsheet */}\n                        {pRDropdownsOpen[index] &&\n                            <PRMenuPopup\n                                controller={controller}\n                                handleTogglePRPopup={handleTogglePRPopup}\n                                PRIndex={index}\n                                spreadSheetList={spreadSheetList}\n                                user={user}\n                            />}\n                    </div>\n                )}\n            </div>\n                :\n                <div>Loading</div>}\n        </div>\n    )\n}\n\nexport default MySheetsList","import { FC } from \"react\"\nimport Spreadsheet from \"../../backend/Spreadsheet\"\nimport { NavLink } from \"react-router-dom\"\nimport Controller from \"../../backend/controller/controller\"\nimport User from \"../../backend/User\"\n// @author Robert Roach\n\ninterface OtherSheetsListProps {\n    controller: Controller,\n    handleChooseSpreadsheet: (id: string) => void,\n    handleDeleteSpreadsheet: (name: string) => void,\n    handleTogglePRPopup: (index: number) => void,\n    loading: boolean,\n    pRDropdownsOpen: boolean[],\n    spreadSheetList: Spreadsheet[],\n    user: User,\n}\n\nconst OtherSheetsList: FC<OtherSheetsListProps> = ({ handleChooseSpreadsheet, loading,  spreadSheetList }) => {\n\n    return (\n        <div>\n            {!loading ? <div className='spreadSheet-list'>\n                <div className='spreadSheet-link spreadSheet-list-header'>\n                    <p>Name</p>\n                    <p className='publisher'>Publisher</p>\n                </div>\n                {spreadSheetList.map((sheet, index) =>\n                    <div className='link-container' key={index}>\n                        <NavLink\n                            className='spreadSheet-link'\n                            onClick={() => handleChooseSpreadsheet(sheet.getSheetName())}\n                            to='/spreadsheet'\n                        >\n                            <p>{sheet.getSheetName()}</p>\n                            <p className='publisher'>{sheet.getPublisher()}</p>\n                        </NavLink>\n                    </div>\n                )}\n            </div>\n                :\n                <div>Loading</div>}\n        </div>\n    )\n}\nexport default OtherSheetsList","import { Component } from 'react'\nimport './pagesCSS/dashboard.css'\nimport User from '../backend/User'\nimport DashboardHeader from '../components/dashboardComponents/DashboardHeader'\nimport Spreadsheet from '../backend/Spreadsheet'\nimport CreateSpreadsheetModal from '../components/dashboardComponents/CreateSpreadsheetModal'\nimport Controller from '../backend/controller/controller'\nimport MySheetsList from '../components/dashboardComponents/MySheetsList'\nimport OtherSheetsList from '../components/dashboardComponents/OtherSheetsList'\n// @author Robert Roach\n\ninterface DashboardProps {\n    controller: Controller,\n    handleChooseSpreadsheet: (id: string) => void,\n    handleCreateSpreadsheet: (name: string) => void,\n    handleDeleteSpreadsheet: (name: string) => void,\n    loading: boolean,\n    spreadSheetList: Spreadsheet[],\n    updateCurrentUser: (user: User | null) => void,\n    user: User,\n}\n\ninterface DashboardState {\n    showMySheetsPage: boolean,\n    isPopupModalOpen: boolean,\n    pRDropdownsOpen: boolean[],\n}\n\nclass Dashboard extends Component<DashboardProps, DashboardState> {\n    constructor(props: DashboardProps) {\n        super(props)\n        this.state = {\n            showMySheetsPage: true,\n            isPopupModalOpen: false,\n            pRDropdownsOpen: [],\n        }\n        this.handleTogglePRPopup = this.handleTogglePRPopup.bind(this)\n        this.handleTogglePopupModal = this.handleTogglePopupModal.bind(this)\n        this.handleTogglePage = this.handleTogglePage.bind(this)\n    }\n\n    // Initializes pRDropdownsOpen in state to be the same length as\n    // spreadSheetList and indicate every PR menu is closed with false values\n    componentDidMount(): void {\n        this.setState({ pRDropdownsOpen: new Array(this.props.spreadSheetList.length).fill(false) })\n    }\n\n    // Changes the state flag that chooses what spreadsheet list to display\n    handleTogglePage(): void {\n        this.setState(prevState => ({ ...prevState, showMySheetsPage: !prevState.showMySheetsPage}))\n    }\n\n    // Handles opening or closing popup via state boolean flag\n    handleTogglePopupModal(): void {\n        this.setState(prevState => ({\n            ...prevState, \n            isPopupModalOpen: !prevState.isPopupModalOpen,\n        }))\n    }\n\n    /**\n     * Takes in a spreadsheet's index for which to open or close\n     * that spreadsheet's PR menu rendered immediately below the listed\n     * spreadsheet in the list. \n     * \n     * @param index : index number for which sheet should have \n     * their dropdown toggled open or closed\n     */\n    handleTogglePRPopup(index: number) {\n        this.setState(prevState => ({\n            ...prevState,\n            pRDropdownsOpen: [\n                ...prevState.pRDropdownsOpen.slice(0, index), // Copy elements before \n                !prevState.pRDropdownsOpen[index], // Toggle the value at the index\n                ...prevState.pRDropdownsOpen.slice(index + 1) // Copy elements after \n            ]\n        }))\n    }\n\n    render() {\n        const { controller, handleChooseSpreadsheet, handleCreateSpreadsheet, handleDeleteSpreadsheet, loading, spreadSheetList, updateCurrentUser, user } = this.props\n        const { isPopupModalOpen, pRDropdownsOpen, showMySheetsPage } = this.state\n\n        const mySheetsList = spreadSheetList.filter(sheet => sheet.getPublisher() === user.getUserName())\n        const otherSheetsList = spreadSheetList.filter(sheet => sheet.getPublisher() !== user.getUserName())\n\n        return (\n            <div className='dashboard-page'>\n                <DashboardHeader updateCurrentUser={updateCurrentUser} user={user} />\n                <div className='dashboard-body'>\n\n                    <div className='top-buttons-row'>\n                        <div className='page-tab-buttons'>\n                            <button \n                                className={`page-button my-sheet-button ${showMySheetsPage ? 'selected' : ''}`}\n                                onClick={this.handleTogglePage}\n                                disabled={showMySheetsPage}\n                            >\n                                My sheets\n                            </button>\n                            <button \n                                className={`page-button ${!showMySheetsPage ? 'selected' : ''}`}\n                                onClick={this.handleTogglePage}\n                                disabled={!showMySheetsPage}\n                            >\n                                Other sheets\n                            </button>\n                        </div>\n                        <button className='create-sheet-button' onClick={() => this.handleTogglePopupModal()}>\n                            Create Spreadsheet\n                        </button>\n                    </div>\n\n                    {/* Conditionally render popup modal for entering new spreadsheet info */}\n                    {isPopupModalOpen && <CreateSpreadsheetModal handleCreateSpreadsheet={handleCreateSpreadsheet} handleTogglePopupModal={this.handleTogglePopupModal}\n                    spreadsheetList={mySheetsList} />}\n\n                    {showMySheetsPage ?\n                        <MySheetsList\n                            controller={controller}\n                            handleChooseSpreadsheet={handleChooseSpreadsheet}\n                            handleDeleteSpreadsheet={handleDeleteSpreadsheet}\n                            handleTogglePRPopup={this.handleTogglePRPopup}\n                            loading={loading}\n                            pRDropdownsOpen={pRDropdownsOpen}\n                            spreadSheetList={mySheetsList}\n                            user={user}\n                        />\n                        :\n                        <OtherSheetsList\n                            controller={controller}\n                            handleChooseSpreadsheet={handleChooseSpreadsheet}\n                            handleDeleteSpreadsheet={handleDeleteSpreadsheet}\n                            handleTogglePRPopup={this.handleTogglePRPopup}\n                            loading={loading}\n                            pRDropdownsOpen={pRDropdownsOpen}\n                            spreadSheetList={otherSheetsList}\n                            user={user}\n                        />\n                    }\n                </div>\n            </div>\n        )\n    }\n}\nexport default Dashboard"],"names":["GetUpdatesForSubscription","ARequest","constructor","publisher","spreadsheet","id","username","password","super","this","execute","Model","encoded","encodeLoginString","updates","client","value","map","argument","payload","addUpdatesForPublished","UpdatePublished","_ref","updateCurrentUser","user","_jsxs","className","children","_jsx","getUserName","onClick","content","handleTogglePopupModal","e","stopPropagation","handleCreateSpreadsheet","spreadsheetList","name","setName","useState","rows","setRows","columns","setColumns","error","setError","spreadsheetPopupContent","onChange","target","placeholder","_Fragment","handleClickCreate","existingSpreadsheet","find","ss","getSheetName","Number","PopupModal","controller","handleTogglePRPopup","PRIndex","spreadSheetList","updateRequests","setUpdateRequests","useEffect","async","sheet","excecuteRequest","getID","getPassword","updateList","getModel","getSubscriptionUpdates","reverse","getUpdates","PRMenuContent","style","color","length","updateRequest","requestIndex","updateRequestIndex","join","handleApproveSubscription","update","updateIndex","handleChooseSpreadsheet","handleDeleteSpreadsheet","loading","pRDropdownsOpen","index","NavLink","to","PRMenuPopup","getPublisher","Dashboard","Component","props","state","showMySheetsPage","isPopupModalOpen","bind","handleTogglePage","componentDidMount","setState","Array","fill","prevState","slice","render","mySheetsList","filter","otherSheetsList","DashboardHeader","concat","disabled","CreateSpreadsheetModal","MySheetsList","OtherSheetsList"],"sourceRoot":""}