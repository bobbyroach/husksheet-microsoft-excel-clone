{"version":3,"file":"static/js/905.cc4d3f90.chunk.js","mappings":"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","sources":["backend/controller/requests/getUpdatesForSubscription.ts","backend/controller/requests/updatePublished.ts","components/spreadSheetComponents/ribbonComponents/Dropdown.tsx","utils/types.ts","components/spreadSheetComponents/ribbonComponents/functionBar.tsx","components/spreadSheetComponents/tableComponents/Cell.tsx","backend/DummyCell.ts","utils/arraysDifferent.ts","components/spreadSheetComponents/tableComponents/Row.tsx","components/spreadSheetComponents/tableComponents/Table.tsx","components/spreadSheetComponents/ribbonComponents/TopRow.tsx","utils/generateSheetData.ts","backend/controller/requests/updateSubscription.ts","pages/SpreadSheetEditor.tsx"],"sourcesContent":["import { IRequest } from './IRequest'\nimport Model from '../../Model'\nimport * as client from '../client'\nimport axios from 'axios'\nimport { ARequest } from './ARequest'\n\nclass GetUpdatesForSubscription extends ARequest implements IRequest {\n    private readonly publisher: string;\n    private readonly spreadsheet: string;\n    private readonly id: number;\n\n    constructor(publisher: string, spreadsheet: string, id: number, username: string, password: string) {\n        super(username, password);\n        this.publisher = publisher;\n        this.spreadsheet = spreadsheet;\n        this.id = id;\n    }\n\n    async execute(Model: Model): Promise<void> {\n        const encoded = this.encodeLoginString();\n        const response = await client.getUpdatesForSubscription(this.publisher, this.spreadsheet, 0, encoded);\n\n        const updates = response.value.map((argument) => argument.payload);\n\n        Model.addUpdatesForPublished(this.publisher, this.spreadsheet, updates);\n    }\n}\n\nexport default GetUpdatesForSubscription\n","import { IRequest } from './IRequest';\nimport Model from '../../Model';\nimport * as client from '../client';\nimport axios from 'axios';\nimport { ARequest } from './ARequest';\n\nclass UpdatePublished extends ARequest implements IRequest {\n    private publisher: string;\n    private spreadsheet: string;\n    private id: number;\n    private payload: string;\n\n    constructor(publisher: string, spreadsheet: string, id: number, payload: string, username: string, password: string) {\n        super(username, password);\n        this.publisher = publisher;\n        this.spreadsheet = spreadsheet;\n        this.id = id;\n        this.payload = payload;\n    }\n\n    async execute(Model: Model): Promise<void> {\n        const encoded = this.encodeLoginString();\n        const response = await client.updatePublished(this.publisher, this.spreadsheet, this.id, this.payload, encoded);\n\n        Model.addUpdatesForPublished(this.publisher, this.spreadsheet, [this.payload]);\n    }\n}\n\nexport default UpdatePublished\n","import { FC, useRef, useState } from 'react'\nimport { Functions } from '../../../utils/types'\n// @author Robert Roach\n\ninterface DropdownProps {\n    buttonLabel: string,\n    listItems: Functions[] | string[],\n    selectFunction: (func: string) => void\n}\n\nconst Dropdown: FC<DropdownProps> = ({ buttonLabel, listItems, selectFunction }) => {\n    const [isOpen, setIsOpen] = useState(false)\n    const dropdownRef = useRef<HTMLDivElement>(null)\n\n    const toggleDropdown = () => {\n        setIsOpen(!isOpen)\n    }\n\n    // Closes dropdown if click elsewhere on page\n    const handleBlur = (e: React.FocusEvent<HTMLDivElement>) => {\n        if (!dropdownRef.current?.contains(e.relatedTarget as Node)) {\n            setIsOpen(false)\n        }\n    }\n\n    return (\n        <div \n            className=\"functions-dropdown\"\n            ref={dropdownRef} \n            onBlur={handleBlur}\n        >\n            <button \n                className=\"dropdown-toggle function-row-boxes\" \n                onClick={toggleDropdown}\n            >\n                {buttonLabel}\n                <div className={`arrow ${isOpen ? 'down' : 'up' }`} />\n            </button>\n            {isOpen && (\n                <div className=\"dropdown-menu\">\n                    {listItems.map((item, index) => (\n                        <button key={index} \n                            className=\"dropdown-item\"\n                            onClick={() => { \n                                selectFunction(item)\n                                setIsOpen(false)\n                            }}\n                        >\n                            {item}\n                        </button>\n                    ))}\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport default Dropdown\n","// Ownership: Robert Roach\n\nexport interface StringMap {\n    [key: string]: string;\n}\n\nexport enum Functions {\n    SUM = 'SUM',\n    IF = \"IF\",\n    MIN = 'MIN',\n    MAX = 'MAX',\n    AVG = 'AVG',\n    CONCAT = 'CONCAT',\n    DEBUG = 'DEBUG',\n    COPY = 'COPY'\n}\n\nexport interface RefDetails {\n    column: number;\n    row: number;\n    value: string | number;\n}","import Dropdown from \"./Dropdown\";\nimport { Functions } from \"../../../utils/types\";\nimport './ribbonCSS/functionRow.css'\nimport { ICell } from \"../../../backend/ICell\";\nimport { FC, useEffect, useState } from \"react\";\n// @author Robert Roach\n\ninterface FunctionBarProps {\n    handleCellChange: (cell: ICell | null, input: string) => void\n    tableData: ICell[][],\n    selectedCell: ICell | null,\n}\n\nconst FunctionBar: FC<FunctionBarProps> = ({ handleCellChange, selectedCell, tableData }) => {\n\n    const [error, setError] = useState<string | null>(null)\n\n    // Updates the error message when function input changes\n    useEffect(() => {\n        if (selectedCell)\n            setError(selectedCell.getErrorMessage())\n    }, [selectedCell, handleCellChange, tableData])\n\n    /**\n     * Handles choosing a function from the dropdown menu of Functions.\n     * @param chosenFunc : string representation of a Function\n     */\n    const handleSelectFunction = (chosenFunc: string): void => {\n        if (selectedCell) {\n            const functionString = \"=\" + chosenFunc + '('\n            handleCellChange(selectedCell, functionString)\n        }\n    }\n\n    const functionList = [Functions.SUM, Functions.IF, Functions.MIN, Functions.MAX, Functions.AVG, Functions.CONCAT, Functions.DEBUG, Functions.COPY]\n\n    return (\n        <div className=\"function-row\">\n            <div className=\"selected-cell function-row-boxes\" >\n                {selectedCell !== null\n                    ? selectedCell.getColumnAsLetter() + (selectedCell.getRow() + 1)\n                    : 'Selected cell'}\n            </div>\n            <Dropdown\n                buttonLabel={'Functions'}\n                listItems={functionList}\n                selectFunction={handleSelectFunction}\n            />\n            <div className=\"function-input-wrapper\">\n                {error && <div className=\"error-tooltip\">\n                    <p>!</p>\n                    <div className=\"error-message\">{error}</div>\n                </div>}\n                <input\n                    className={`function-input function-row-boxes ${error && 'activeError'}`}\n                    onChange={(e) => handleCellChange(selectedCell, e.target.value)}\n                    value={selectedCell !== null ? selectedCell.getFormula() : \"\"}\n                />\n            </div>\n        </div>\n    )\n\n}\n\nexport default FunctionBar","import React, { useCallback, useEffect, useState } from 'react';\nimport { ICell } from '../../../backend/ICell';\n// @author Robert Roach\n\ninterface CellProps {\n    changeSelectedCell: (cell: ICell) => void\n    cell: ICell,\n    columnWidth: number,\n    handleCellChange: (cell: ICell, value: string) => void\n    handleMouseDown: (index: number, event: React.MouseEvent) => void\n    xCoord: number,\n    yCoord: number,\n}\n\nconst Cell: React.FC<CellProps> = ({ changeSelectedCell, cell, columnWidth, handleCellChange, handleMouseDown, xCoord, yCoord }) => {\n    const [isEditing, setIsEditing] = useState(false)\n    const [inputValue, setInputValue] = useState(cell.getValue());\n\n    const handleClick = () => {\n        changeSelectedCell(cell)\n        setIsEditing(true)\n    }\n\n    // No longer editing a cell\n    const handleBlur = () => {\n        setIsEditing(false)\n    }\n\n    /**\n     * Handle a change to cell input value, which updates the state and then\n     * separately updates the cell's value in the overall table array of cells\n     */\n    const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n        const newValue = event.target.value\n        setInputValue(newValue)\n        handleCellChange(cell, newValue)\n    }, [handleCellChange, cell])\n\n    // Everytime this cell changes, recieve its value and set it in state\n    useEffect(() => {\n        setInputValue(cell.getValue())\n    }, [cell])\n\n    // Top left corner cell, not editable\n    if (xCoord === 0 && yCoord === 0) {\n        return <div className='corner-cell' />;\n    }\n    // Index cells on lefthand side, not editable\n    else if (xCoord === 0) {\n        return <div className={`index-cell`}>\n            {cell.getValue()}\n        </div>\n    }\n    // Header cells with letter column names, not editable\n    else if (yCoord === 0) {\n        return (\n            <div className='header-cell' style={{ width: `${columnWidth}px` }}>\n                <div className=\"column-cell-text\">{cell.getValue()}</div>\n                {/* Element that handles resizing columns */}\n                <div\n                    className=\"resizer\"\n                    onMouseDown={(e) => handleMouseDown(xCoord, e)}\n                />\n            </div>)\n    } else {\n        // Regular cells\n        return isEditing ? (\n            <input\n                className=\"cell\"\n                onBlur={handleBlur}\n                onChange={handleChange}\n                style={{ width: `${columnWidth}px` }}\n                value={inputValue}\n                autoFocus\n            />\n        ) : (\n            <div\n                className=\"cell cell-div\"\n                onClick={handleClick}\n                style={{ width: `${columnWidth}px` }}\n            >\n                {cell.getValue()}\n            </div>\n        )\n    }\n}\n\nexport default Cell","import { ICell } from './ICell';\n\n// Cells that contain only a string\n// Ownership: Aneesh Ponduru\nclass DummyCell implements ICell {\n    private value: string;\n\n    // Constructor for DummyCell class\n    constructor(value: string) {\n        this.value = value;\n    }\n\n    setFormula(formula: string): void {\n        throw new Error('Method not implemented.');\n    }\n\n    getFormula(): string {\n        throw new Error(\"Method not implemented.\");\n    }\n    \n    // Dummy cell only contains a value\n    getRow(): number {\n        throw new Error('Method not implemented.');\n    }\n    getColumn(): number {\n        throw new Error('Method not implemented.');\n    }\n    getColumnAsLetter(): string {\n        throw new Error('Method not implemented.');\n    }\n    setValue(value: string | number): void {\n        throw new Error('Method not implemented.');\n    }\n    getSpreadSheetID(): string {\n        throw new Error('Method not implemented.');\n    }\n    getErrorMessage(): string | null {\n        throw new Error('Method not implemented.');\n    }\n\n    // Get the value of the TextCell\n    getValue(): string {\n        return this.value;\n    }\n}\n\nexport default DummyCell;\n","// Ownership: Robert Roach\n\nexport function arraysDifferent(arr1: (string | number)[], arr2: (string | number)[]): boolean {\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return true\n        }\n    }\n    return false\n}","import React, { Component } from 'react'\nimport Cell from './Cell'\nimport { ICell } from '../../../backend/ICell'\nimport DummyCell from '../../../backend/DummyCell'\nimport { arraysDifferent } from '../../../utils/arraysDifferent'\n// @author Robert Roach\n\ninterface RowProps {\n    changeSelectedCell: (cell: ICell) => void\n    columnWidths: number[],\n    handleCellChange: (cell: ICell, value: string) => void\n    handleMouseDown: (index: number, event: React.MouseEvent) => void\n    cellRow: ICell[],\n    rowIndex: number,\n}\n\ninterface RowState {\n    prevCellRow: (string | number)[],\n    prevColumnWidths: number[],\n}\n\nclass Row extends Component<RowProps, RowState> {\n    constructor(props: RowProps) {\n        super(props)\n        this.state = {\n            prevColumnWidths: props.columnWidths.slice(),\n            prevCellRow: []\n        }\n    }\n\n    shouldComponentUpdate(nextProps: RowProps): boolean {\n        // Checks if any element in rowData or column widths has changed\n        if (\n            arraysDifferent(nextProps.cellRow.map(val => val.getValue()), this.state.prevCellRow) \n            || arraysDifferent(nextProps.columnWidths, this.state.prevColumnWidths)\n        ) {\n            this.updatePrevData()\n            return true\n        }\n        return false\n    } \n \n    /**\n     * If the component does update, this row's cell data has been changed\n     * and the previous state values must be updated for future comparisons.\n     */\n    updatePrevData(): void {\n        this.setState({ prevCellRow: this.props.cellRow.map(val => val.getValue()) })\n        this.setState({ prevColumnWidths: this.props.columnWidths.slice() })\n    }\n\n    render() {\n        const { changeSelectedCell, columnWidths, handleCellChange, handleMouseDown, cellRow, rowIndex } = this.props\n\n        // Add y column row indices and keep first row blank (top left square)\n        const cellRowWithIndex = rowIndex !== 0 \n            ? [new DummyCell(String(rowIndex)), ...cellRow] \n            : [new DummyCell(\"\"), ...cellRow]\n\n\n        return (\n            <div className={`row ${rowIndex === 0 ? 'column-row' : ''}`}>\n                {cellRowWithIndex.map((cell, cellIndex) => {\n                    return <Cell\n                        cell={cell}\n                        changeSelectedCell={changeSelectedCell}\n                        columnWidth={columnWidths[cellIndex]}\n                        handleCellChange={handleCellChange}\n                        handleMouseDown={handleMouseDown}\n                        key={cellIndex}\n                        xCoord={cellIndex}\n                        yCoord={rowIndex}\n                    />\n                })}\n            </div>\n        )\n    }\n}\n\nexport default Row","import React, { Component } from 'react'\nimport './tableComponents.css'\nimport Row from './Row'\nimport { ICell } from '../../../backend/ICell'\nimport { AutoSizer, List, ListRowProps } from 'react-virtualized'\n// @author Robert Roach\n\ninterface TableProps {\n    changeSelectedCell: (cell: ICell) => void\n    handleCellChange: (cell: ICell, value: string) => void\n    tableData: ICell[][];\n}\n\ninterface TableState {\n    columnWidths: number[],\n}\n\nclass Table extends Component<TableProps, TableState> {\n\n    constructor(props: TableProps) {\n        super(props)\n        this.state = {\n            columnWidths: new Array(props.tableData.length).fill(75),\n        }\n        this.handleMouseDown = this.handleMouseDown.bind(this)\n    }\n\n    componentDidUpdate(prevProps: TableProps): void {\n        // Check if tableData has been updated to update column widths\n        if (prevProps.tableData.length === 0 && this.props.tableData.length > 0) {\n            this.setState({\n                columnWidths: new Array(this.props.tableData[0].length + 1).fill(75)\n            })\n        }\n    }\n\n    /**\n     * Function to handle mouse down event on column borders to \n     * increase or decrease column width\n     * \n     * @param index : header cell's width to be changed\n     * @param event : mouseDown, mouseUp, or mouse movement\n     */\n    handleMouseDown = (index: number, event: React.MouseEvent): void => {\n        event.preventDefault()\n        const startX = event.clientX\n        const startWidth = this.state.columnWidths[index]\n\n        const handleMouseMove = (moveEvent: MouseEvent) => {\n            const newWidth = startWidth + (moveEvent.clientX - startX)\n            this.setState((prevState) => {\n                const columnWidths = [...prevState.columnWidths]\n\n                // Set a minimum pixel width\n                columnWidths[index] = newWidth > 50 ? newWidth : 50;\n                return { columnWidths }\n            })\n        }\n        const handleMouseUp = () => {\n            document.removeEventListener('mousemove', handleMouseMove)\n            document.removeEventListener('mouseup', handleMouseUp)\n        }\n        document.addEventListener('mousemove', handleMouseMove)\n        document.addEventListener('mouseup', handleMouseUp)\n    }\n\n    /**\n     * Renders out the list of rows, used inside of react-virtualized List in render method\n     * to only render rows that are currently on screen\n     */\n    renderRow = ({ index, style }: ListRowProps) => {\n        const { changeSelectedCell, handleCellChange } = this.props\n        const { columnWidths } = this.state\n        const cellRow = this.props.tableData[index]\n\n        return (\n            <div key={index} style={style}>\n                <Row\n                    changeSelectedCell={changeSelectedCell}\n                    handleCellChange={handleCellChange}\n                    handleMouseDown={this.handleMouseDown}\n                    rowIndex={index}\n                    cellRow={cellRow}\n                    columnWidths={columnWidths}\n                />\n            </div>\n        )\n    }\n\n    render() {\n        const { changeSelectedCell, handleCellChange, tableData } = this.props\n        const { columnWidths } = this.state\n        const totalWidth = this.state.columnWidths.reduce((acc, width) => acc + width, 0) - 30\n\n        return (\n            <div>\n                {tableData[0]?.length < 401 ?\n                    <div className='spreadsheet-table'>\n                        {tableData.map((cellRow, rowIndex) => {\n                            return <Row\n                                key={rowIndex}\n                                changeSelectedCell={changeSelectedCell}\n                                handleCellChange={handleCellChange}\n                                handleMouseDown={this.handleMouseDown}\n                                rowIndex={rowIndex}\n                                cellRow={cellRow}\n                                columnWidths={columnWidths}\n                            />\n                        })}\n                    </div>\n                    :\n                    <div className='large-spreadsheet-table'>\n                        <AutoSizer disableWidth>\n                            {({ height }) => (\n                                <List\n                                    columnWidths={columnWidths}\n                                    height={height}\n                                    rowCount={tableData.length}\n                                    rowHeight={22}\n                                    rowRenderer={this.renderRow}\n                                    tableData={tableData}\n                                    style={{ paddingBottom: '17px' }}\n                                    overscanRowCount={3}\n                                    width={totalWidth}\n                                />)}\n                        </AutoSizer>\n                    </div>}\n            </div>\n        )\n    }\n}\n\nexport default Table","import { FC, useEffect, useState } from \"react\"\nimport { NavLink } from \"react-router-dom\"\nimport './ribbonCSS/topRow.css'\nimport User from \"../../../backend/User\"\nimport Spreadsheet from \"../../../backend/Spreadsheet\"\n// @author Robert Roach\n\ninterface TopRowProps {\n    handleUpdateSubscription: (spreadsheet: Spreadsheet | null) => void,\n    spreadsheet: Spreadsheet | null,\n    updateCurrentUser: (user: User | null) => void,\n    user: User,\n}\n\nconst TopRow: FC<TopRowProps> = ({ handleUpdateSubscription, spreadsheet, updateCurrentUser, user }) => {\n    const [autoUpdatesEnabled, setAutoUpdatesEnabled] = useState<boolean>(false)\n\n    useEffect(() => {\n        // Set auto updates enabled state flag when spreadsheet is loaded\n        if (spreadsheet)\n            setAutoUpdatesEnabled(spreadsheet.autoUpdatesEnabled())\n    }, [spreadsheet])\n\n    // Update new auto updates mode in state and in spreadsheet class\n    const handleToggleAutoUpdates = () => {\n        if (spreadsheet) {\n            const prevVal = spreadsheet?.autoUpdatesEnabled()\n            spreadsheet?.setAutoUpdates(!prevVal)\n            setAutoUpdatesEnabled(!prevVal)\n        }\n    }\n\n    const ownershipStatus = user.getUserName() === spreadsheet?.getPublisher()\n        ? \"Publisher\"\n        : \"Editor\"\n\n    return (\n        <div className='top-row'>\n            <div className='top-left-row'>\n                <NavLink className='home-button buttons' to='/'>\n                    Home\n                </NavLink>\n                {/* If current spreadsheet isn't owned by current user, update subscription \n                button will appear if the owner has disabled auto updates for editors so they can\n                send update requests */}\n                {ownershipStatus !== 'Publisher' ?\n                    <button \n                        className='save-button buttons'\n                        onClick={() => handleUpdateSubscription(spreadsheet)}\n                        style={{ display: `${autoUpdatesEnabled ? 'none' : ''}` }}\n                    >\n                        Update Subscription\n                    </button>\n                    :\n                    <button\n                        className='save-button buttons'\n                        onClick={handleToggleAutoUpdates}\n                    >\n                        {autoUpdatesEnabled ? 'Disable' : 'Enable'} Auto Updates\n                    </button>\n                }\n                <h1>{spreadsheet?.getSheetName().substring(0, 30)}</h1>\n            </div>\n            <div className='top-right-row'>\n                <p className=\"profile\">{user.getUserName().substring(0, 20) + ': ' + ownershipStatus}</p>\n                <NavLink \n                    className='logout-button buttons'\n                    onClick={() => updateCurrentUser(null)}\n                    to='/?'\n                >\n                    Logout\n                </NavLink>\n            </div>\n        </div>\n    )\n}\n\nexport default TopRow","import { ICell } from '../backend/ICell';\nimport DummyCell from '../backend/DummyCell';\n// Ownership: Robert Roach\n\nconst alphabetList = [\n    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K',\n    'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',\n    'W', 'X', 'Y', 'Z'\n]\n\n// Logic to create column names like A, B, C, ... AA, AB, AC, ...\nexport function getColumnValues(columns: number): ICell[] {\n    let columnValues = new Array(columns)\n\n    for (let i = 0; i < columns; i++) {\n        if (i < 26) {\n            columnValues[i] = new DummyCell(alphabetList[i])\n        }\n        else {\n            columnValues[i] = new DummyCell(alphabetList[Math.floor((i - 26) / 26)] + alphabetList[i % 26])\n        }\n    }\n\n    return columnValues\n}\n","import { IRequest } from './IRequest';\nimport Model from '../../Model';\nimport * as client from '../client';\nimport { ARequest } from './ARequest';\n\nclass UpdateSubscription extends ARequest implements IRequest {\n    private publisher: string;\n    private spreadsheet: string;\n    private id: number;\n    private payload: string;\n\n    constructor(publisher: string, spreadsheet: string, id: number, payload: string, username: string, password: string) {\n        super(username, password);\n        this.publisher = publisher;\n        this.spreadsheet = spreadsheet;\n        this.id = id;\n        this.payload = payload;\n    }\n\n    async execute(Model: Model): Promise<void> {\n        const encoded = this.encodeLoginString();\n        const response = await client.updateSubscription(this.publisher, this.spreadsheet, this.id, this.payload, encoded);\n        Model.addUpdatesForSubscription(this.publisher, this.spreadsheet, [this.payload]);\n    }\n}\n\nexport default UpdateSubscription\n","import { Component } from 'react';\nimport FunctionBar from '../components/spreadSheetComponents/ribbonComponents/functionBar';\nimport Table from '../components/spreadSheetComponents/tableComponents/Table';\nimport Spreadsheet from '../backend/Spreadsheet';\nimport TopRow from '../components/spreadSheetComponents/ribbonComponents/TopRow';\nimport User from '../backend/User';\nimport { ICell } from '../backend/ICell';\nimport './pagesCSS/spreadsheetEditor.css';\nimport { getColumnValues } from '../utils/generateSheetData';\nimport Controller from '../backend/controller/controller';\nimport getUpdatesForPublished from '../backend/controller/requests/getUpdatesForPublished';\nimport UpdateSubscription from '../backend/controller/requests/updateSubscription';\nimport UpdatePublished from '../backend/controller/requests/updatePublished';\nimport GetUpdatesForSubscription from '../backend/controller/requests/getUpdatesForSubscription';\nimport { getUpdatesForSubscription } from '../backend/controller/client';\n// @author Robert Roach\n\ninterface SpreadSheetEditorState {\n    errorMessage: string,\n    loading: boolean,\n    tableData: ICell[][],\n    selectedCell: ICell | null,\n}\n\ninterface SpreadSheetEditorProps {\n    controller: Controller,\n    spreadsheet: Spreadsheet | null,\n    updateCurrentUser: (user: User | null) => void,\n    user: User,\n}\n\nclass SpreadSheetEditor extends Component<SpreadSheetEditorProps, SpreadSheetEditorState> {\n    constructor(props: SpreadSheetEditorProps) {\n        super(props)\n        this.state = {\n            errorMessage: '',\n            loading: false,\n            tableData: [],\n            selectedCell: null,\n        }\n        this.handleCellChange = this.handleCellChange.bind(this)\n        this.changeSelectedCell = this.changeSelectedCell.bind(this)\n        this.handleUpdateSubscription = this.handleUpdateSubscription.bind(this)\n    }\n\n    // Updates tableData to be the passed in spreadSheet's cells on component mount\n    async componentDidMount() {\n        try {\n            if (this.props.spreadsheet) {\n                this.setState({ loading: true })\n                // Get current published sheet updates by calling endpoint\n                await this.props.controller.excecuteRequest(new GetUpdatesForSubscription(this.props.spreadsheet.getPublisher(), this.props.spreadsheet?.getSheetName(), 0, this.props.user.getUserName(), this.props.user.getPassword()))\n                // Get all cells and initialize them in state\n                const tableData = this.props.spreadsheet.getAllCells()\n                const newTableData = [getColumnValues(this.props.spreadsheet.getColumns()), ...tableData]\n                this.setState({ tableData: newTableData, loading: false })\n            } else {\n                this.setState({ loading: true })\n            }\n        } catch (error) {\n            this.setState({ errorMessage: (error instanceof Error) ? error.message : \"Problem loading spreadsheet\" })\n        }\n    }\n\n    /**\n     * Updates the value and function for selected cell\n     * If the current user is the owner of the spreadsheet, updates are immediately published.\n     */\n    async handleCellChange(cell: ICell | null, value: string) {\n        const { controller, spreadsheet, user } = this.props\n\n        if (cell && spreadsheet) {\n            cell.setValue(value)\n            // Format update like: $A7 15, or $A7 =SUM($A5:$A6)\n            const update = \"$\" + cell.getColumnAsLetter() + (cell.getRow() + 1) + ' ' + cell.getFormula()\n            // If current user is owner of spreadsheet, immediately set published updates\n            if (spreadsheet.getPublisher() === user.getUserName() || spreadsheet.autoUpdatesEnabled()) {\n                await controller.excecuteRequest(\n                    new UpdatePublished(\n                        spreadsheet.getPublisher(), spreadsheet.getSheetName(),\n                        Number(spreadsheet.getID()), update, user.getUserName(), user.getPassword())\n                )\n            }\n            // Add update to the current spreadSheet to save for possible subscription updates\n            else {\n                this.props.spreadsheet?.addUpdate(\"$\" + cell.getColumnAsLetter() + (cell.getRow() + 1), cell.getFormula())\n            }\n            // Update tableData to rerender the table's new values\n            const newTableData = [...this.state.tableData]\n            this.setState({ tableData: newTableData })\n        }\n    }\n\n    /**\n     * Stores the current selected cell in state\n     */\n    changeSelectedCell(cell: ICell) {\n        this.setState({ selectedCell: cell })\n    }\n\n    /**\n     * Handles calling the updateSubscription endpoint and passing in \n     * current changes to a spreadsheet\n     * @param spreadsheet \n     */\n    async handleUpdateSubscription(spreadsheet: Spreadsheet | null) {\n        const { user } = this.props\n\n        if (spreadsheet && user) {\n            try {\n                let sheetUpdates = spreadsheet.getUpdates()\n                // Loop over the dictionary and format each entry\n                const formattedUpdates = Object.entries(sheetUpdates)\n                    .map(([key, value]) => `${key} ${value}`)\n                    .join('\\n');\n\n                await this.props.controller.excecuteRequest(new UpdateSubscription(\n                    user.getUserName(), spreadsheet.getSheetName(), Number(spreadsheet.getID()), formattedUpdates, user.getUserName(), user.getPassword()\n                ))\n            } catch (error) {\n                this.setState({ errorMessage: (error instanceof Error) ? error.message : \"Problem sending subscription update\" })\n            }\n        }\n    }\n\n    render() {\n        const { errorMessage, loading, selectedCell, tableData } = this.state\n\n        return (\n            <div className='spreadsheet-editor-page'>\n                <TopRow\n                    handleUpdateSubscription={this.handleUpdateSubscription}\n                    spreadsheet={this.props.spreadsheet}\n                    user={this.props.user}\n                    updateCurrentUser={this.props.updateCurrentUser}\n                />\n                <FunctionBar\n                    handleCellChange={this.handleCellChange}\n                    selectedCell={selectedCell}\n                    tableData={tableData}\n                />\n                {loading ? <div>Loading...</div>\n                    :\n                    <>\n                        {errorMessage !== \"\" ? <div className='error'>{errorMessage}</div> : \n                        <Table\n                            changeSelectedCell={this.changeSelectedCell}\n                            handleCellChange={this.handleCellChange}\n                            tableData={tableData}\n                        />}\n                    </>\n                }\n            </div>\n        )\n    }\n}\n\nexport default SpreadSheetEditor\n"],"names":["GetUpdatesForSubscription","ARequest","constructor","publisher","spreadsheet","id","username","password","super","this","execute","Model","encoded","encodeLoginString","updates","client","value","map","argument","payload","addUpdatesForPublished","UpdatePublished","_ref","buttonLabel","listItems","selectFunction","isOpen","setIsOpen","useState","dropdownRef","useRef","_jsxs","className","ref","onBlur","e","_dropdownRef$current","current","contains","relatedTarget","children","onClick","toggleDropdown","_jsx","concat","item","index","Functions","handleCellChange","selectedCell","tableData","error","setError","useEffect","getErrorMessage","functionList","SUM","IF","MIN","MAX","AVG","CONCAT","DEBUG","COPY","getColumnAsLetter","getRow","Dropdown","chosenFunc","onChange","target","getFormula","changeSelectedCell","cell","columnWidth","handleMouseDown","xCoord","yCoord","isEditing","setIsEditing","inputValue","setInputValue","getValue","handleClick","handleBlur","handleChange","useCallback","event","newValue","style","width","onMouseDown","autoFocus","setFormula","formula","Error","getColumn","setValue","getSpreadSheetID","arraysDifferent","arr1","arr2","i","length","Row","Component","props","state","prevColumnWidths","columnWidths","slice","prevCellRow","shouldComponentUpdate","nextProps","cellRow","val","updatePrevData","setState","render","rowIndex","cellRowWithIndex","DummyCell","String","cellIndex","Cell","Table","preventDefault","startX","clientX","startWidth","handleMouseMove","moveEvent","newWidth","prevState","handleMouseUp","document","removeEventListener","addEventListener","renderRow","Array","fill","bind","componentDidUpdate","prevProps","_tableData$","totalWidth","reduce","acc","AutoSizer","disableWidth","_ref2","height","List","rowCount","rowHeight","rowRenderer","paddingBottom","overscanRowCount","handleUpdateSubscription","updateCurrentUser","user","autoUpdatesEnabled","setAutoUpdatesEnabled","ownershipStatus","getUserName","getPublisher","NavLink","to","display","handleToggleAutoUpdates","prevVal","setAutoUpdates","getSheetName","substring","alphabetList","getColumnValues","columns","columnValues","Math","floor","UpdateSubscription","addUpdatesForSubscription","SpreadSheetEditor","errorMessage","loading","componentDidMount","_this$props$spreadshe","controller","excecuteRequest","getPassword","getAllCells","newTableData","getColumns","message","update","_this$props$spreadshe2","Number","getID","addUpdate","sheetUpdates","getUpdates","formattedUpdates","Object","entries","key","join","TopRow","FunctionBar","_Fragment"],"sourceRoot":""}